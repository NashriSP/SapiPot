import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import numpy as np
import pickle
from urllib.parse import urlparse, parse_qs,unquote
import re



class modelHTTP:
    def __init__(self,request=list):
        self.max_length = 100
        self.trunc_type='post'
        self.padding_type='post'
        self.request = request
        #load model
        self.model = tf.keras.models.load_model("TheSapiPot/model/SentAn")
        #load data
        with open('TheSapiPot/model/tokenizer_sentAn.pickle', 'rb') as handle:
            self.tokenizer,self.labels_len = pickle.load(handle)
    
    def unquote_link(self,url_link):
        try:
            link = unquote(url_link)
            if '%' in link:
                return self.unquote_link(link)
            else:
                return link
        except TypeError:
            pass
        
    def make_url(self, request):
        try:
            headers, payload = request.split('\n\n')
            referer = None
            for header in headers.split('\n'):
                if header.startswith('Referer:'):
                    referer = header.split('Referer: ')[1]
            referer_with_payload = referer + '?' + payload
            return(referer_with_payload)
        except ValueError:
            headers = request.split("\n")
            for header in headers:
                if header.startswith("Referer:"):
                    return(header.split()[1])
                    

    def extract_variables_from_requests(self,request_list):
        variables_list = []
        
        for request in request_list:
            url = self.make_url(request)
            url = self.unquote_link(url)
            parsed_url = urlparse(url)
            query_string = parsed_url.query
            query_vars = parse_qs(query_string)
            
            variables = []
            for var in query_vars:
                if var == 'user_token':
                    continue
                variables.append(query_vars[var][0])
                
            variables_list.append(variables)
        
        return variables_list

    def spaced_variables(self,var_list):
        my_string = ' '.join(var_list)
        print(my_string)
        escaped_string = re.sub(r'([:()])', r'\\\1', my_string)
        spaced_string = ' '.join(escaped_string)
        return spaced_string

    # copy from here

    def predicts(self):
        query_vars = self.extract_variables_from_requests(self.request)
        
        sentence = []
        for ix,vars in enumerate(query_vars):
            sentence.append(self.spaced_variables(vars))
            # if vars:
            # else:
            #     del self.request[ix]
        if sentence:
            print(sentence)
            sequences = self.tokenizer.texts_to_sequences(sentence)
            padded = pad_sequences(sequences, maxlen=self.max_length, padding=self.padding_type, truncating=self.trunc_type)
            results = self.model.predict(padded,verbose=0 )
            for j,res in enumerate(results):
                predict = ""
                percent = np.round(res*100, 2)
                predict += f'link {self.request[j]} \n'
                for i,x in enumerate(res):
                    predict += f"[{i+1}] "+self.labels_len[i]+" "+str(int(percent[i]))+"% \n"
                yield(predict)
        else:
            pass
data = [
    """GET /dvwa/js/add_event_listeners.js HTTP/1.1
Host: 192.168.8.189
Connection: keep-alive
User-Agent: Mozilla/5.0 (Linux; Android 6.0.1; CPH1701) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Mobile Safari/537.36
Accept: */*
Referer: http://192.168.8.189/dvwa/index.php?namesj=sadjahosjdh
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Cookie: PHPSESSID=52e4g6dn48372ep0atfkljcihu; security=impossible"""
,"""POST /dvwa/login.php HTTP/1.1?name=<!--\x3E<img src=xxx:x onerror=javascript:alert(1)> -->
Host: 192.168.8.189
Connection: keep-alive
Content-Length: 91
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
Origin: http://192.168.8.189
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (Linux; Android 10; M2010J19CG) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Mobile Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Referer: http://192.168.8.189/dvwa/login.php
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Cookie: PHPSESSID=7a8r074s4po0nddnk0b8ig6eah; security=impossible

username=kali&password=password1" OR 1 = 1 -- -&Login=Login&user_token=50dd079bc51fe9993a425ede60e529a5"""
]
prd = modelHTTP(request=data)
for res in prd.predicts():
    print(res)
